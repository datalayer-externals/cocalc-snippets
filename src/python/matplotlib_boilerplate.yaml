# CoCalc Examples Documentation File
# Copyright: CoCalc Authors, 2018
# This is derived content from the BSD licensed https://github.com/moble/jupyter_boilerplate/

# # # # # # # # # # # # # # # # # # # # # # # # # # #
# THIS FILE IS AUTOGENERATED -- DO NOT EDIT BY HAND #
# # # # # # # # # # # # # # # # # # # # # # # # # # #

---
language: python
---
category: ['Visualization', 'Matplotlib / Example plots']
setup: "import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt"
---
title: |
  Basic line plot
code: |
  # Silly example data
  bp_x = np.linspace(0, 2*np.pi, num=40, endpoint=True)
  bp_y = np.sin(bp_x)
  
  # Make the plot
  plt.plot(bp_x, bp_y, linewidth=3, linestyle="--",
           color="blue", label=r"Legend label $\sin(x)$")
  plt.xlabel(r"Description of $x$ coordinate (units)")
  plt.ylabel(r"Description of $y$ coordinate (units)")
  plt.title(r"Title here (remove for papers)")
  plt.xlim(0, 2*np.pi)
  plt.ylim(-1.1, 1.1)
  plt.legend(loc="lower left")
  plt.show()
---
title: |
  Histogram
code: |
  x = np.random.randn(10000)  # example data, random normal distribution
  num_bins = 50
  n, bins, patches = plt.hist(x, num_bins, facecolor="green", alpha=0.5)
  plt.xlabel(r"Description of $x$ coordinate (units)")
  plt.ylabel(r"Description of $y$ coordinate (units)")
  plt.title(r"Histogram title here (remove for papers)")
  plt.show();
---
title: |
  Contour plot
code: |
  # Silly example data
  x_min, x_max, y_min, y_max = 0.0, 2*np.pi, 0.0, 2*np.pi
  f = [[np.sin(x**2 + y**2) for x in np.linspace(x_min, x_max, num=200)]
       for y in np.linspace(y_min, y_max, num=200)]
  
  # Make the plot
  plt.figure()
  plt.imshow(f, interpolation="bicubic", origin="lower",
             extent=[x_min, x_max, y_min, y_max])
  plt.colorbar()
  plt.title(r"Title here (remove for papers)")
  plt.xlabel(r"Description of $x$ coordinate (units)")
  plt.ylabel(r"Description of $y$ coordinate (units)")
  plt.show()
---
title: |
  3-d plot
code: |
  from mpl_toolkits.mplot3d import Axes3D
  from matplotlib import cm

  # Silly example data
  X = np.arange(-5, 5, 0.25)
  Y = np.arange(-5, 5, 0.25)
  X, Y = np.meshgrid(X, Y)
  R = np.sqrt(X**2 + Y**2)
  Z = np.sin(R)

  # Make the plot
  fig = plt.figure()
  ax = plt.axes(projection="3d")
  surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,
                         linewidth=0, antialiased=False)
  ax.set_zlim(-1.01, 1.01)
  fig.colorbar(surf, shrink=0.5, aspect=5)
  plt.show()
---
title: |
  Error bars
code: |
  # Silly example data
  x = np.linspace(0.1, 4, num=10)
  y = np.exp(-x)
  dx = 0.1 - x/25.0
  dy = 0.2 + x/15.0
  
  # Make the plot
  plt.figure()
  plt.errorbar(x, y, xerr=dx, yerr=dy)
  plt.title(r"Title here (remove for papers)")
  plt.xlabel(r"Description of $x$ coordinate (units)")
  plt.ylabel(r"Description of $y$ coordinate (units)")
  plt.show()
---
title: |
  Grouped plots
code: |
  # Silly example data
  bp_x1 = np.linspace(0, 2*np.pi, num=40, endpoint=True)
  bp_y1 = np.sin(bp_x1)
  bp_x2 = np.linspace(0, np.pi, num=40, endpoint=True)
  bp_y2 = np.cos(bp_x2)
  
  # Make the plot
  fig, (ax1, ax2) = plt.subplots(ncols=2)
  ax1.plot(bp_x1, bp_y1, linewidth=3, linestyle="--",
           color="blue", label=r"Legend label $\sin(x)$")
  ax1.set_xlabel(r"Description of $x_{1}$ coordinate (units)")
  ax1.set_ylabel(r"Description of $y_{1}$ coordinate (units)")
  ax1.set_title(r"Title 1 here (remove for papers)")
  ax1.set_xlim(0, 2*np.pi)
  ax1.set_ylim(-1.1, 1.1)
  ax1.legend(loc="lower left")
  ax2.plot(bp_x2, bp_y2, linewidth=3, linestyle="--",
           color="blue", label=r"Legend label $\cos(x)$")
  ax2.set_xlabel(r"Description of $x_{2}$ coordinate (units)")
  ax2.set_ylabel(r"Description of $y_{2}$ coordinate (units)")
  ax2.set_title(r"Title 2 here (remove for papers)")
  ax2.set_xlim(0, np.pi)
  ax2.set_ylim(-1.1, 1.1)
  ax2.legend(loc="lower left")
  plt.show()
---
category: ['Visualization', 'Matplotlib / Save the current figure']
setup: "import numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt"
---
title: |
  Save as PDF
code: |
  plt.savefig("figure_file_name.pdf")
---
title: |
  Save as PNG
code: |
  plt.savefig("figure_file_name.png", transparent=True, dpi=300)
---
title: |
  Save as SVG
code: |
  plt.savefig("figure_file_name.svg")
---
title: |
  Save as EPS
code: |
  plt.savefig("figure_file_name.eps")
---
title: |
  Save as PS
code: |
  plt.savefig("figure_file_name.ps")