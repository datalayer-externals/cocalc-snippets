# CoCalc Examples Documentation File
# Copyright: SageMath Inc., 2018
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
---
language: julia
category: Tutorial / First Steps
---
title: Introduction
descr: |
  Some sources for introductions to Julia:

  * https://julialang.org/learning/
  * https://en.wikibooks.org/wiki/Introducing_Julia
code: |
  # this is a comment and the next line calculates the sum of two vectors
  [2 3] + [-1 7]
---
title: Print
descr: |
  You can print to standard output almost anything.
  One way to interpolate a string via the `$(...)` syntax.
code:
  - |
    println("Hello", 99)
  - |
    x = 10
    println("Interpolation $(5 + x)")
---
title: Printf
descr: |
  This examples shows the [`@printf` macro](https://docs.julialang.org/en/v1.1/stdlib/Printf/),
  for C-style formatting.
  The line `using Printf` loads that package and makes all functions and macros available in the current session.
code: |
  using Printf
  @printf("pi = %.7f\n", float(pi))
---
title: Calling a Function
descr: |
  Use round brackets, multiple arguments are separated by commas.
code: |
  sin(3.14)
---
title: Expressions
descr: |
  An assignment happens by evaluating the expression on the right side after an `=` sign.
  So, in order to master Julia, you need to know how evaluating an expression works!
code: |
  3 + (1 - 5.5) / 2
---
title: Assignments
descr: |
  On the left of the equal sign are variables.
  You can interpret them as "name tags" for the evaluated expressions on the right.
  Later, you can use these names to reference the results and build up more expressions.

  Play with the following lines of code to get a feeling for what's going on.
code: |
  a = 1 + 2 + 3
  b = a / 10
  c = a + b
  println([a b c])
---
title: Conditionals
descr: |
  It's very common to only evaluate a part of a code under a certain condition.
  This is done via an "if"-statement.
  Again, play with the value of x to get a feeling of what's happening.

  Pro-tipp: set `x = NaN` to trigger the last case.
  This stands for "Not a Number" and is commonly used to signal that there is no known value (e.g. missing results during an experiment)
code: |
  x = 4
  if x > 0
      println("x above zero")
  elseif x < 0
      println("x below zero")
  elseif x == 0
      println("x exactly zero")
  else
      println("I don't understand what x is")
  end
---
title: Loops
descr: |
  Here is the other common building block for programming:
  Evaluating a block of code more than once, e.g. by either counting the iterations or until a condition is met (or no longer met).
  This is one of the most confusing parts of programming.
  So don't be shy to take your time inspecting this.
  Try to evaluate this little program in your head by reading the lines over and over again...
code: |
  using Printf
  s = 0
  for i = [1 2 5 100 -1 5]
      s = s + i
      @printf("i = %4d  â†’  s = %4d\n", i, s)
  end
---
title: Function
descr: |
  A function is a very important and fundamental building block in the Julia language.
  It transforms a set of inputs to a result.
  Most importantly, several functions can have the same name -- and they're selected based on the types of the input.
code: |
  function f1(a::Int)
      return 2*a
  end
  function f1(a::Float64)
      return -3*a
  end

  println(f1(10))
  println(f1(2.0))