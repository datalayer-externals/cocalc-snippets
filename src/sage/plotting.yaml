# CoCalc Examples Documentation File
# Copyright: SageMath Inc., 2015--2016
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
---
language: sage
category: Plotting / Introduction
---
title: Introduction
descr: |
  This is a very simple example how to plot a function.

  For plots of symbolic functions you need to make sure, that $x$ is a symbolic variable.
  `x` is defined as such a variable by default, but you might have overwritten it.
  In such a case, `x = var('x')` redefines $x$ as such a symbolic variable with the name `"x"`.

  The second argument `(x, -10, 10)` defines the interval where to evaluate the symoblic expression.
  In this case here, it says to evaluate $x \in [-10, \, 10]$.

  The Sage Reference guide to plotting is here: http://doc.sagemath.org/html/en/reference/plotting/index.html
code: |
  x = var('x')
  plot(x * sin(x), (x, -10, 10))
---
title: Simple 2D Plot
code: plot(2*x^2 - 3*x + 1, (x, -10, 10))
descr: Plot of $f(x) = 2x^2 - 3x + 1$.
---
title: Cool 2D Plot
code: plot(x * sin(x), (x, -10, 10))
descr: Plot of $f(x) = x \sin(x)$.
---
category: Plotting/3D
---
title: Simple 3D Plot
code: |
  var('x y')
  plot3d(sin(x) * cos(y), (x, -10, 10), (y, -10, 10))
descr: >
  3D plot of $f(x,y) = \sin(x)\cos(y)$.
---
title: "Cube"
descr: "Show a colored cube"
code: |
  thecube = cube(
    color=['red', 'blue', 'green'],
    frame_thickness=2,
    frame_color='brown',
    opacity=0.8
  )
  show(thecube, frame=False)
---
title: "Function"
descr: "Plot f(x, y)"
code: |
  x, y = var('x, y')
  plot3d(x * sin(y), (x, -5, 5), (y, -5, 5))
---
title: 3D Surfaces
descr: |
  The function `plot3d` shows a function $f(x,\,y) \rightarrow \mathrm{R}$ in 3D.

  Ref: https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/plot3d.html
code: |
  var('x y')
  k = 2
  plot3d(4 * sin(x) * cos(y) * exp(-0.1 * x^2), (x, -k*pi, k*pi), (y, -k*pi, k*pi))
---
title: 3D Parametric Plots
descr: |
  `parametric_plot3d` shows a function taking two parameters mapping to points in 3 dimensions â€“
  i.e. $\begin{pmatrix}u \\ v\end{pmatrix} \rightarrow \begin{pmatrix}f(u,\,v) \\ g(u,\,v) \\ h(u,\,v)\end{pmatrix}$.

  Ref: https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/parametric_plot3d.html
code: |
  var('u,v')
  parametric_plot3d((cos(u), 2*sin(u)+cos(v), sin(v)), (u,0,2*pi), (v,-pi,pi), mesh=True)
---
title: 3D Implicit Plots
descr: |
  In general, an implicit plot shows the surface or volume of an area, where the given equation is true.
  The left hand side of such an equation is given, while the right hand side is called "contour" and usually 0.

  Ref: https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/implicit_plot3d.html
code: |
  var('x, y, z')
  T = RDF(golden_ratio)
  F = 2 - (cos(x+T*y) + cos(x-T*y) + cos(y+T*z) + cos(y-T*z) + cos(z-T*x) + cos(z+T*x))
  r = 4.77
  implicit_plot3d(F, (x,-r,r), (y,-r,r), (z,-r,r), plot_points=40, color='darkkhaki')
---
title: 3D Surfaces of Revolution
descr: |
  Another method is to rotate a line, curve or function around an axis.
  Sage's `revolution_plot3d` allows to create another set of 3D objects.

  Ref: https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/revolution_plot3d.html
code: |
  var('u')
  line = u
  parabola = u^2
  sur1 = revolution_plot3d(line, (u,0,1), opacity=0.5, rgbcolor=(1,0.5,0), show_curve=True, parallel_axis='x')
  sur2 = revolution_plot3d(parabola, (u,0,1), opacity=0.5, rgbcolor=(0,1,0), show_curve=True, parallel_axis='x')
  (sur1+sur2).show()
---
title: 3D Vector Field
descr: |
  A vector field shows the direction of a "force" as arrows.

  Ref: https://doc.sagemath.org/html/en/reference/plot3d/sage/plot/plot3d/plot_field3d.html
code: |
  x,y,z=var('x y z')
  plot_vector_field3d((x*cos(z),-y*cos(z),sin(z)), (x,0,pi), (y,0,pi), (z,0,pi))
---
title: "Icosahedron"
code: |
  show(icosahedron(color='green', opacity=.5, mesh=3), spin=1)
---
title: "Implicit plot"
descr: "Create an implicit 3D plot"
code: |
  x, y, z = var('x y z')
  g = golden_ratio; r = 4.77
  p = 2 - (cos(x + g*y) + cos(x - g*y) + cos(y + g*z) +
           cos(y - g*z) + cos(z - g*x) + cos(z + g*x))
  show(implicit_plot3d(p, (x, -r, r), (y, -r, r), (z, -r, r),
                  plot_points=30, color='orange', mesh=1, opacity=.7), spin=1)
---
title: "Parametric surface"
code: |
  u, v = var('u, v')
  fx = (3*(1+sin(v)) + 2*(1-cos(v)/2)*cos(u))*cos(v)
  fy = (4+2*(1-cos(v)/2)*cos(u))*sin(v)
  fz = -2*(1-cos(v)/2) * sin(u)
  parametric_plot3d([fx, fy, fz], (u, 0, 2*pi), (v, 0, 2*pi), color="green", opacity=.7, mesh=1, spin=5)
---
title: "Polytope"
code: |
  points = [(2,0,0), (0,2,0), (0,0,2), (-1,0,0), (0,-1,0), (0,0,-1)]
  show(LatticePolytope(points).plot3d(), spin=5)
---
title: "Random walk"
descr: "A 3D Random Walk"
code: |
  v = [(0,0,0)]
  for i in range(1000):
      v.append([a+random()-.5 for a in v[-1]])
  line3d(v, color='red', thickness=3, spin=3)
---
title: "Tetrahedron"
code: |
  show(tetrahedron(color='lime', opacity=.5, mesh=3), spin=1)
---
title: "Text"
descr: "Draw 3D text"
code: |
  text3d("Text in 3D", (1,1, 1), color="darkred", fontsize=20)
---
title: "Torus"
code: |
  from sage.plot.plot3d.shapes import Torus
  inner_radius = .3; outer_radius = 1
  show(Torus(outer_radius, inner_radius, color='orange'), aspect_ratio=1, spin=3)
---

